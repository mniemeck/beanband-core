package org.beanband.model.midi;

import java.util.Collection;

import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiEvent;

/**
 * Abstract superclass of all MIDI elements. For final rendering each
 * {@code MidiElement} needs to translate into a list of {@code MidiEvent}
 * objects that will be included in the final {@code Sequence}.
 * 
 * @author Michael Niemeck
 *
 */
public abstract class MidiElement {

	/**
	 * Returns a list of {@code MidiEvent} objects generated by this
	 * {@code MidiEvent}.
	 * 
	 * @param channel     The channel on which the {@code MidiEvent} objects will be
	 *                    put.
	 * @param ticksPerBar The length of the current bar in MIDI ticks.
	 * @return A {@code Collection} of {@code MidiEvent} objects.
	 * @throws InvalidMidiDataException When the creation of the {@code MidiEvent}
	 *                                  runs into an illegal state.
	 */
	public abstract Collection<MidiEvent> getMidiEvents(int channel, long ticksPerBar) throws InvalidMidiDataException;

	protected long calculateTicks(double value, long ticksPerBar) {
		return Math.round(value * ticksPerBar);
	}

	protected long calculateTicks(double value, long offset, long ticksPerBar) {
		return offset + Math.max(calculateTicks(value, ticksPerBar), 1);
	}
}
